class ConwaySimulationGun : Weapon
{
	CVar runningCV;

    Default {
	    Weapon.SlotNumber 1;
        Weapon.BobStyle "Smooth";
        Weapon.BobRangeX 0.5;
        Weapon.BobRangeY 0.2;
        
        +WEAPON.MELEEWEAPON;
    }
	
    States
    {
    Ready:
	  TNT1 A 0 {
		if(GetRunning()) {
			return ResolveState("ReadyOn"); 
		} else {
			return ResolveState("ReadyOff"); 
		}
	  }
	ReadyOff:
      CNWY A 1 A_WeaponReady;
      Loop;
	ReadyOn:
      CNWY B 1 A_WeaponReady;
	  Loop;
    Deselect:
	  TNT1 A 0 {
		if(GetRunning()) {
			return ResolveState("DeselectOn"); 
		} else {
			return ResolveState("DeselectOff"); 
		}
	  }
    DeselectOff:
      CNWY A 1 A_Lower;
      Loop;
    DeselectOn:
      CNWY B 1 A_Lower;
      Loop;
	Select:
	  TNT1 A 0 {
		if(GetRunning()) {
			return ResolveState("SelectOn"); 
		} else {
			return ResolveState("SelectOff"); 
		}
	  }
    SelectOff:
      CNWY A 1 A_Raise;
      Loop;
    SelectOn:
      CNWY B 1 A_Raise;
      Loop;
    Fire:
	  TNT1 A 0 {
		if(GetRunning()) {
			return ResolveState("FireOn"); 
		} else {
			return ResolveState("FireOff"); 
		}
	  }
	FireOff:
      CNWY A 5 ToggleSimulationRunning;
      CNWY B 5 A_PlaySound("switches/normbutn", CHAN_WEAPON);
      Goto ReadyOn;
	FireOn:
      CNWY B 5 ToggleSimulationRunning;
      CNWY A 5 A_PlaySound("switches/normbutn", CHAN_WEAPON);
      Goto Ready;
    }

	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		runningCV = CVar.FindCVar("running");
	}

	action void ToggleSimulationRunning() {
		/* Functions must be declared with action keyword to be callable from a
		state definition. In this context, `invoker` is the weapon and `self` is the player.
		*/
		invoker.runningCV.SetInt(!GetRunning());
	}

	action bool GetRunning() {
		return invoker.runningCV.GetInt() != 0;
	}
}
