class BuddyImp : DoomImp
{
	bool lastDamageWasFriendly;

	States
	{
		Spawn: //used as idle state 
		CDIW A 10 A_Look; //actively looks for player
		Loop;
		
		See:  
		CDIW AB 3 A_Chase; //player found - chase
		Loop;
		
		Pain:  //pain frames 
		CDIP A 3;
		CDIP A 2 A_Pain;
		CDIP A 1 {
			if (lastDamageWasFriendly) {
				return ResolveState("FakeDeath");
			}
			return ResolveState(null);
		}
		Goto See;
		
		Melee:     //works like a switch statement , should carry down
		Missile:
		CDIA A 8 A_FaceTarget;
		CDIA AB 6 A_TroopAttack;
		Goto See;
		
		FakeDeath:
		TROO I 1 {
			bInvulnerable = true;
		}
		TROO I 7;
		TROO J 8; //A_Scream
		TROO K 6;
		TROO L 6;
		TROO M 1 {
			A_Log("FakeDeath");
			ACS_Terminate(3, 0);
		}
		Goto BuddyRaise;
		
		BuddyRaise:
		TROO ML 8;
		TROO KJI 6;
		TROO I 1 {
			bInvulnerable = false;
			ACS_NamedExecute("BuddyRaise", 0);
		}
		Goto See;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
		//A_Log("Damaged by:" .. source .. ", friendly:" .. source.bFriendly);
		lastDamageWasFriendly = source.bFriendly;
		bBuddha = lastDamageWasFriendly;
		return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
}